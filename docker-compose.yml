services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile-backend
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${INNER_POSTGRES_PORT}
      - POSTGRES_URL=${POSTGRES_URL}
    depends_on:
      - database
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - ./backend/infrastructure/database/migrations:/app/backend/infrastructure/database/migrations
    networks:
      - dev-sync

  database:
    image: postgres:13
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${OUTER_POSTGRES_PORT}:${INNER_POSTGRES_PORT}"
    volumes:
      - dev_sync_pg_data:/var/lib/postgresql/data
    networks:
      - dev-sync

  celery_worker:
    build:
      context: .
      dockerfile: backend/Dockerfile-celery_worker
    env_file:
      - .env
    container_name: celery_worker
    depends_on:
      - redis
      - backend
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_BACKEND_URL}
    networks:
      - dev-sync

  celery_beat:
    build:
      context: .
      dockerfile: backend/Dockerfile-celery_beat
    env_file:
      - .env
    container_name: celery_beat
    depends_on:
      - redis
      - backend
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_BACKEND_URL}
    networks:
      - dev-sync

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "${OUTER_REDIS_PORT}:${INNER_REDIS_PORT}"
    networks:
      - dev-sync
    volumes:
      - dev_sync_redis_data:/data


volumes:
  dev_sync_pg_data:
    driver: local
  dev_sync_redis_data:


networks:
  dev-sync:
    driver: bridge
